# Generated by the protocol buffer compiler.  DO NOT EDIT!

from google.protobuf import descriptor
from google.protobuf import message
from google.protobuf import reflection
from google.protobuf import service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
_HASHTYPE = descriptor.EnumDescriptor(
  name='HashType',
  full_name='bithorde.HashType',
  filename='HashType',
  values=[
    descriptor.EnumValueDescriptor(
      name='MD5', index=0, number=1,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='SHA1', index=1, number=2,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='SHA256', index=2, number=3,
      options=None,
      type=None),
  ],
  options=None,
)


_STATUS = descriptor.EnumDescriptor(
  name='Status',
  full_name='bithorde.Status',
  filename='Status',
  values=[
    descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=1,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='NOTFOUND', index=1, number=2,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='INVALID_HANDLE', index=2, number=3,
      options=None,
      type=None),
    descriptor.EnumValueDescriptor(
      name='WOULD_LOOP', index=3, number=4,
      options=None,
      type=None),
  ],
  options=None,
)


MD5 = 1
SHA1 = 2
SHA256 = 3
SUCCESS = 1
NOTFOUND = 2
INVALID_HANDLE = 3
WOULD_LOOP = 4



_HANDSHAKE = descriptor.Descriptor(
  name='HandShake',
  full_name='bithorde.HandShake',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='name', full_name='bithorde.HandShake.name', index=0,
      number=1, type=9, cpp_type=9, label=2,
      default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='protoversion', full_name='bithorde.HandShake.protoversion', index=1,
      number=2, type=13, cpp_type=3, label=2,
      default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)


_OPEN_REQUEST = descriptor.Descriptor(
  name='Request',
  full_name='bithorde.Open.Request',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='reqId', full_name='bithorde.Open.Request.reqId', index=0,
      number=1, type=13, cpp_type=3, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='hashType', full_name='bithorde.Open.Request.hashType', index=1,
      number=2, type=14, cpp_type=8, label=2,
      default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='assetId', full_name='bithorde.Open.Request.assetId', index=2,
      number=3, type=12, cpp_type=9, label=2,
      default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)

_OPEN_RESPONSE = descriptor.Descriptor(
  name='Response',
  full_name='bithorde.Open.Response',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='reqId', full_name='bithorde.Open.Response.reqId', index=0,
      number=1, type=13, cpp_type=3, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='status', full_name='bithorde.Open.Response.status', index=1,
      number=2, type=14, cpp_type=8, label=2,
      default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='handle', full_name='bithorde.Open.Response.handle', index=2,
      number=3, type=13, cpp_type=3, label=1,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='size', full_name='bithorde.Open.Response.size', index=3,
      number=4, type=13, cpp_type=3, label=1,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)

_OPEN = descriptor.Descriptor(
  name='Open',
  full_name='bithorde.Open',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)


_READ_REQUEST = descriptor.Descriptor(
  name='Request',
  full_name='bithorde.Read.Request',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='reqId', full_name='bithorde.Read.Request.reqId', index=0,
      number=1, type=13, cpp_type=3, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='handle', full_name='bithorde.Read.Request.handle', index=1,
      number=2, type=13, cpp_type=3, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='offset', full_name='bithorde.Read.Request.offset', index=2,
      number=3, type=4, cpp_type=4, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='size', full_name='bithorde.Read.Request.size', index=3,
      number=4, type=13, cpp_type=3, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)

_READ_RESPONSE = descriptor.Descriptor(
  name='Response',
  full_name='bithorde.Read.Response',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='reqId', full_name='bithorde.Read.Response.reqId', index=0,
      number=1, type=13, cpp_type=3, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='status', full_name='bithorde.Read.Response.status', index=1,
      number=2, type=14, cpp_type=8, label=2,
      default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='offset', full_name='bithorde.Read.Response.offset', index=2,
      number=3, type=4, cpp_type=4, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='content', full_name='bithorde.Read.Response.content', index=3,
      number=4, type=12, cpp_type=9, label=2,
      default_value="",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)

_READ = descriptor.Descriptor(
  name='Read',
  full_name='bithorde.Read',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)


_CLOSE = descriptor.Descriptor(
  name='Close',
  full_name='bithorde.Close',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='handle', full_name='bithorde.Close.handle', index=0,
      number=1, type=13, cpp_type=3, label=2,
      default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)


_STREAM = descriptor.Descriptor(
  name='Stream',
  full_name='bithorde.Stream',
  filename='bithorde.proto',
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='handshake', full_name='bithorde.Stream.handshake', index=0,
      number=1, type=11, cpp_type=10, label=2,
      default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='openReq', full_name='bithorde.Stream.openReq', index=1,
      number=2, type=11, cpp_type=10, label=3,
      default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='openRes', full_name='bithorde.Stream.openRes', index=2,
      number=3, type=11, cpp_type=10, label=3,
      default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='close', full_name='bithorde.Stream.close', index=3,
      number=4, type=11, cpp_type=10, label=3,
      default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='readReq', full_name='bithorde.Stream.readReq', index=4,
      number=5, type=11, cpp_type=10, label=3,
      default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='readRes', full_name='bithorde.Stream.readRes', index=5,
      number=6, type=11, cpp_type=10, label=3,
      default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],  # TODO(robinson): Implement.
  enum_types=[
  ],
  options=None)


_OPEN_REQUEST.fields_by_name['hashType'].enum_type = _HASHTYPE
_OPEN_RESPONSE.fields_by_name['status'].enum_type = _STATUS
_READ_RESPONSE.fields_by_name['status'].enum_type = _STATUS
_STREAM.fields_by_name['handshake'].message_type = _HANDSHAKE
_STREAM.fields_by_name['openReq'].message_type = _OPEN_REQUEST
_STREAM.fields_by_name['openRes'].message_type = _OPEN_RESPONSE
_STREAM.fields_by_name['close'].message_type = _CLOSE
_STREAM.fields_by_name['readReq'].message_type = _READ_REQUEST
_STREAM.fields_by_name['readRes'].message_type = _READ_RESPONSE

class HandShake(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _HANDSHAKE

class Open(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class Request(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _OPEN_REQUEST
  
  class Response(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _OPEN_RESPONSE
  DESCRIPTOR = _OPEN

class Read(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class Request(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _READ_REQUEST
  
  class Response(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _READ_RESPONSE
  DESCRIPTOR = _READ

class Close(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CLOSE

class Stream(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _STREAM

