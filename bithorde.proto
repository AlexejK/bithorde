package bithorde;

enum HashType
{
  SHA1 = 1;
  SHA256 = 2;
  TREE_TIGER = 3;
  ED2K = 4;
}

enum Status {
  NONE = 0;
  SUCCESS = 1;
  NOTFOUND = 2;
  INVALID_HANDLE = 3;
  WOULD_LOOP = 4;
  DISCONNECTED = 5;
  TIMEOUT = 6;
  NORESOURCES = 7;
  ERROR = 8;
}

message Identifier {
    required HashType type = 1;   // Name of the other side
    required bytes    id   = 2;   // Version of the protocol this client supports
}

message HandShake { // Must be first message in stream
  required string name = 1;
  required uint32 protoversion = 2 [default = 1];
}

/****************************************************************************************
 * Binds one set of Asset-identifiers to a specific handle
 * Re-binding new assets to already used handles is allowed.
 * Binding to a zero-length list of identifiers, is allowed, releasing the asset.
 ***************************************************************************************/
message BindRead { // Client->Server initate Read-Only binding
  required uint32 handle = 1;
  repeated Identifier ids = 2;
  required uint64 uuid = 3;
  required uint32 timeout = 4;
}
message BindWrite { // Client->Server initiate Read/Write Binding
  required uint32 handle = 1;
  required uint64 size = 2;
  required uint32 timeout = 3;
}

message AssetStatus { // Server->Client, confirm bind-status (respond to Bind-Read/Write, notify changes in availability, and notify asset gone)
  required uint32 handle = 1;
  required Status status = 2;
  repeated Identifier ids = 3; // Used to notify client of new ids
  optional uint32 size = 4;    // Notify Client of known size
}

message Read {
  message Request {
    required uint32 reqId = 1;
    required uint32 handle = 2;
    required uint64 offset = 3;
    required uint32 size = 4;
    required uint32 timeout = 5;
  }
  message Response {
    required uint32 reqId = 1;
    required Status status = 2;
    required uint64 offset = 3;
    required bytes content = 4;
  }
}

message DataSegment {
    required uint32 handle = 1;   // Asset handle for the data
    required uint64 offset = 2;   // Content start offset
    required bytes content = 3;   // Content to write
}

// Dummy message to document the stream message-ids itself.
// Makes no sense as a message or object.
message Stream
{
  required HandShake handshake          = 1;
  repeated BindRead bindRead            = 2;
  repeated AssetStatus assetStatus      = 3;
  repeated Read.Request readReq         = 5;
  repeated Read.Response readRes        = 6;
  repeated BindWrite bindWrite          = 7;
  repeated DataSegment dataSeg          = 8;
}