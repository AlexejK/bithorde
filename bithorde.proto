package bithorde;

enum HashType
{
  MD5 = 1;
  SHA1 = 2;
  SHA256 = 3;
}

enum Status {
  SUCCESS = 1;
  NOTFOUND = 2;
  INVALID_HANDLE = 3;
  WOULD_LOOP = 4;
}

message HandShake { // Must be first message in stream
  required string name = 1;
  required uint32 protoversion = 2 [default = 1];
}

message Open {
  message Request {
    required uint32 reqId = 1;
    required HashType hashType = 2;
    required bytes assetId = 3;
  }
  message Upload {
    required uint32 reqId = 1;
    required uint64 size = 2;
  }
  message Response {
    required uint32 reqId = 1;
    required Status status = 2;
    optional uint32 handle = 3;
    optional uint32 size = 4;
  }
}

message Read {
  message Request {
    required uint32 reqId = 1;
    required uint32 handle = 2;
    required uint64 offset = 3;
    required uint32 size = 4;
  }
  message Response {
    required uint32 reqId = 1;
    required Status status = 2;
    required uint64 offset = 3;
    required bytes content = 4;
  }
}

message DataSegment {
    const ProtoBufField[] _fields = [
    required uint32 handle = 1;   // Asset handle for the data
    required uint64 offset = 2;   // Content start offset
    required bytes content = 3;   // Content to write
}

message Close {
  required uint32 handle = 1;     // Handle to asset, 0 means failure
}

// Dummy message to document the stream itself. Makes no sense as a message or object.
message Stream
{
  required HandShake handshake   = 1;
  repeated Open.Request openReq  = 2;
  repeated Open.Response openRes = 3;
  repeated Close close           = 4;
  repeated Read.Request readReq  = 5;
  repeated Read.Response readRes = 6;
  repeated Open.Upload uploadReq = 7;
  repeated DataSegment dataSeg   = 8;
}